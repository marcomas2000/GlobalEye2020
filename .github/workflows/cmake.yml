name: Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: windows-latest

    env:
      VCPKG_ROOT: '${{ github.workspace }}/vcpkg'

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: recursive
        
      # vcpkg-cache
    - name: Restore vcpkg and its artifacts.
      uses: actions/cache@v2
      id: vcpkg-cache
      with:
        path: |
            ${{ env.VCPKG_ROOT }}
            ${{ github.workspace }}/build/vcpkg_installed
            !${{ env.VCPKG_ROOT }}/.git
            !${{ env.VCPKG_ROOT }}/buildtrees
            !${{ env.VCPKG_ROOT }}/packages
            !${{ env.VCPKG_ROOT }}/downloads
        key: |
            ${{ hashFiles( 'vcpkg.json' ) }}-cache-key-v1

      # install vcpkg
    - name: Get vcpkg(windows)
      # The platform is windows and is not cached
      if: ${{ steps.vcpkg-cache.outputs.cache-hit != 'true' }}
      run: |
          cd ${{ github.workspace }}
          mkdir build -force
          git clone https://github.com/Microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat

      # install opencv
    - name: install opencv
      if: ${{ steps.vcpkg-cache.outputs.cache-hit != 'true' }}
      run: |
         cd ${{ github.workspace }}
         vcpkg install opencv:x64-windows
    
    - name: Running cmake
      run: |
         cd ${{ github.workspace }}
         cd build
         cmake .. -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DCMAKE_BUILD_TYPE=Release
    
    #- name: Configure CMake
    #  # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
    #  # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
    #  run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
      
    - name: Upload a Build Artifact
      uses: actions/upload-artifact@v3.1.2
      with:
          path: ./build
